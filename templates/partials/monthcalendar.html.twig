{% set cal_id = unique_id(6) %}
<fuller-calendar id="fcl-{{ cal_id }}"></fuller-calendar>
<dialog id="dlg-{{ cal_id }}" style="border: none !important; border-radius: calc(5px * var(--ratio)); box-shadow: 0 0 #0000, 0 0 #0000, 0 25px 50px -12px rgba(0, 0, 0, 0.25); padding: 1.6rem; background-color: #825626; color: #dbd7cb;">
	<h2 style="margin: 2rem 0 1rem; font-weight: 800;">Book a sesh</h2>
	<button type="button" class="button close">Close</button>
	{{ include('partials/booking-dialog.html.twig') }}
</dialog>
<div id="legend"></div>

{% script 'https://cdn.jsdelivr.net/npm/@fullcalendar/core@6.1.10/index.global.js' %}
{% script 'https://cdn.jsdelivr.net/npm/@fullcalendar/daygrid@6.1.10/index.global.js' %}
{% script 'https://cdn.jsdelivr.net/npm/@fullcalendar/interaction@6.1.10/index.global.min.js' %}
{% script 'https://cdn.jsdelivr.net/npm/@fullcalendar/timegrid@6.1.10/index.global.min.js' %}
{% script 'https://cdn.jsdelivr.net/npm/@fullcalendar/google-calendar@6.1.10/index.global.min.js' %}
{% script 'plugins://fullcalendar/assets/ical.js/build/ical.min.js' at 'bottom' %}

{% style %}
.booking input {
	/* font-weight: bold; */
	text-align: center;
	letter-spacing: 0.05rem;
	background-color: #63599b;
}
#booking-date-display {
	text-align: center;
	font-weight: bold;
	font-size: larger;
}
{% endstyle %}

{% script at 'bottom' %}

const dialog = document.querySelector('#dlg-{{ cal_id }}');
const closeButton = dialog.querySelector('button.close');
if(closeButton) {
	closeButton.addEventListener("click", (e) => {
		e.preventDefault();
		dialog.close();
		});
}

Date.prototype.toYmdDate = function() {
	const year = new Intl.DateTimeFormat(undefined, { year: 'numeric' }).format(this);
	const month = new Intl.DateTimeFormat(undefined, { month: '2-digit' }).format(this);
	const day = new Intl.DateTimeFormat(undefined, { day: '2-digit' }).format(this);
	return `${year}-${month}-${day}`;
	};

class FullerCalendar extends HTMLElement {
	constructor() {
		super();

		this.attachShadow({
			mode: 'open',
			});

		const calendarEl = document.createElement('div');
		calendarEl.id = `${this.id}-rind`;
		this.shadowRoot.append(calendarEl);

		const sheet = new CSSStyleSheet();
		sheet.replaceSync(`
			#${calendarEl.id} {
				--fc-page-bg-color: initial;
			}
			`);
		this.shadowRoot.adoptedStyleSheets.push(sheet);

		const calendar = new FullCalendar.Calendar(calendarEl, {
			initialView: "timeGridWeek",
		height: 'auto',
		allDaySlot: false,
		slotMinTime: '07:00:00',
		selectable: true,
		selectMirror: true,
		selectOverlap: false,
		nowIndicator: true,
		stickyHeaderDates: true,
		// footerToolbar: true,
		titleFormat: { month: 'short', day: 'numeric' },
		dayHeaderFormat: function(date) {
			const dt = date.date.marker;
			const dow = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']; // FIXME: still hacky
			return dow[dt.getDay()] + ' ' + dt.getDate() + '/' + (dt.getMonth() + 1);
			},
		googleCalendarApiKey: '{{ config.plugins.fullcalendar.google_api_key }}',
		events: { {# TODO: conditionally include this and other ical properties/events #}
			googleCalendarId: '{{ gcal }}',
			},
		select: function(selectMetadata) { console.log(selectMetadata);
			// alert(`you selected ${selectMetadata.startStr} to ${selectMetadata.endStr}`);
			// TODO: reject any dates in the past

			const timeFormat = new Intl.DateTimeFormat('en-GB', {hour: 'numeric', minute: 'numeric'});
			const dateFormat = new Intl.DateTimeFormat('en-GB', {dateStyle: 'full'});
			const start = selectMetadata.start;
			const finish = selectMetadata.end;
			const startDateDisplay = dialog.querySelector('#booking-date-display');
			const startDateField = dialog.querySelector('#booking-start-date');
			const startTimeField = dialog.querySelector('#booking-start-time');
			const finishDateField = dialog.querySelector('#booking-finish-date');
			const finishTimeField = dialog.querySelector('#booking-finish-time');
			startDateDisplay.replaceChildren(dateFormat.format(start));
			startDateField.value = start.toYmdDate();
			finishDateField.value = finish.toYmdDate(); // we're not handling appointments spanning days RN, this included for completeness
			startTimeField.value = timeFormat.format(start);
			finishTimeField.value = timeFormat.format(finish);

			// reset some "sticky" dialog display elements from previous submissions
			dialog.querySelector('*[type=submit]').style.display = 'initial';
			if(dialog.querySelector('.notices')) {
				dialog.querySelector('.notices').remove();
			}

			dialog.showModal();
			},
		});


		calendar.render();

		setTimeout( () => {
			calendarEl.querySelectorAll('[style]').forEach((el) => {
				el.removeAttribute('style');
				});
		}, 2000);
		calendar.today();
	}
}

customElements.define('fuller-calendar', FullerCalendar);

{% endscript %}
